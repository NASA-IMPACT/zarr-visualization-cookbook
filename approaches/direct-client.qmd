---
title: "Direct Client"
---

### Background

Traditional approaches to rendering raster datasets in the browser involve the creation of tiles in a pixelated image format like PNG or JPEG. These tiles can be pre-generated or created by a tiling server on demand, as described in the [tiling approach chapter](tiling.qmd). While the image tiles are fast to load and easy to render, tiling offers limited flexibility for dynamically customizing visualizations based on user input. In contrast, the direct client approach leverages Zarr to render the data directly using WebGL rather than through an intermediate layer. The Zarr format is ideal for direct rendering in the browser because the chunks of a Zarr dataset serve a similar purpose to the tiles of a web map. In addition, data can be chunked across non-spatial dimensions like time, which removes the requirement of generating individual tiles per time step. Lastly, as a cloud-optimized data format Zarr allows for fast, parallel reading and writing from object storage.

The direct client approach leverages pyramids created with the [ndpyramid](https://github.com/carbonplan/ndpyramid) package in order to performantly render data at multiple zoom levels. The approach loads Zarr data using the [zarr-js](https://github.com/freeman-lab/zarr-js) JavaScript library and renders the fetched chunks via WebGL using the [regl](https://github.com/regl-project/regl) library. The open-source library called [@carbonplan/maps](https://github.com/carbonplan/maps) provides a small set of React components for loading and rendering Zarr data using this approach and supports rendering traditional vector layers side-by-side using `mapbox-gl-js`.

CarbonPlan has used this approach to quickly develop visualizations to showcase climate ([some](https://carbonplan.org/research/cmip6-downscaling) [example](https://carbonplan.org/research/seaweed-farming) [visualizations](https://carbonplan.org/research/forest-carbon)).

### Zarr V2 vs V3

Historically, building these visualizations has required creating a second, visualization-specific copy of the data. The primary factor being the gap between the low limit of request sizes that can be reasonably fetched by the browser (<10 MB) and the conventional Zarr chunk sizes (~100 MB) used for analysis. With the introduction of the [sharding extension](https://zarr.dev/zeps/draft/ZEP0002.html) to the Zarr V3 spec, both access patterns can now be accommodated by a single dataset.

Also in interest of directly visualizing analysis-ready datasets, the previously required reprojection step in `ndpyramid` pre-preprocessing has been removed for the V3 prototype and instead the data are reprojected in the client itself.

## References

[Freeman, J., K. Martin, and J. Hamman, 2021: A new toolkit for data-driven maps, https://carbonplan.org/blog/maps-library-release](https://carbonplan.org/blog/maps-library-release)
