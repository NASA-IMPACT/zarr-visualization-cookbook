[
  {
    "objectID": "transition-from-rmarkdown.html",
    "href": "transition-from-rmarkdown.html",
    "title": "Transition from RMarkdown",
    "section": "",
    "text": "You may already have workflows in RMarkdown and are interested in transitioning to Quarto. There’s no hurry to migrate to Quarto. Keep using Rmarkdown and when you’re ready the migration will be fine.\nHere are some notes as we migrate RMarkdown sites and books.\nTODO: translating R code chunks"
  },
  {
    "objectID": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "href": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Bookdown to Quarto",
    "text": "Bookdown to Quarto\nConverting a Bookdown book to Quarto is slightly more involved than converting a website. A book has chapters whose order must be defined, and likely has citations and cross-refs. Still, conversion is not that hard.\nWe got some practice converting from Bookdown to Quarto by helping Gavin Fay convert his lab’s fantastic onboarding documentation, the Faylab Lab Manual. Here’s the GitHub view before and after.\nOur best first reference material for this was Nick Tierney’s Notes on Changing from Rmarkdown/Bookdown to Quarto. Nick shares some scripts in that post to automate some changes. In our case, the book was small enough that we made all changes manually. Quarto documentation was indispensable.\n\nExperimenting in a low-risk environment\nWe forked a copy of the Faylab Lab manual to the Openscapes organization, and worked in a branch so we could make changes relatively risk-free. We could always fork a new copy of the original if we “broke” something. (Caution: the default when making a pull request from a fork is to push changes to the original upstream repo, not your fork and it does this without warning if you have write-access to that repo.) With local previews it’s easy to test / play with settings to see what they do. We tended to make a change, Preview, then compare the look and functionality of the book to the original. It was helpful to comment out some elements of the configuration file _output.yml after their counterparts had been added to the Quarto configuration file _quarto.yml, or to confirm they were no longer needed, before making the drastic move of deleting them.\n\n\nThe conversion\nHere are the main steps to convert the Faylab Lab manual from Bookdown to Quarto.\nCreate new empty file called _quarto.yml and add book metadata there. The screenshots below\nSet project type as book.\nMove metadata out of index.qmd and into _quarto.yml. Title, author, and publication date were in index.qmd with date set using date: \"Last updated:r Sys.Date()\". Now these are in _quarto.yml with date set using date: last-modified. Note that having R code would require you to adjust code chunk options in the Quarto style (#|). This tripped us up a bit; see GitHub Actions.\nMove chapters listing out of _bookdown.yml and into _quarto.yml.\nAdd page footer to _quarto.yml.\nHere’s what ours looked like when we finished the steps above (_quarto.yml).\n\n\n\n\n\n\n_quarto.yml contents\n\n\n\n\n\n\n\nFaylab Lab Manual\n\n\n\n\n\nChange insertion of images from html style to Quarto style. (Note Quarto calls them “figures”, not “images”.) The following snippet will insert the GitHub octocat logo in a page:\n![](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){fig-align=\"left\" width=\"35px\"}\nChange all filename extensions .Rmd -&gt; .qmd (you could Preview after this change and see that the book looks the same). Note that Quarto works with .Rmd files just as well as it does .qmd, so this change is not urgent. In fact, if you have a lot of R code in your .Rmds (unlike the Faylab Lab Manual), there will be additional tinkering needed to make the code chunks happy.\n\n\nCitations\nThe Faylab Lab Manual cited two papers, presenting us with an opportunity to see how easy it is to add references to a Quarto book. Briefly, in the Visual Editor, Insert &gt; Citation &gt; DOI. Pasting the DOI or its full URL, we can insert the citation. This automatically creates a references.bib file and adds the full citations at the bottom of the chapter page (watch demo). In July 2022, we had to manually add a ## References heading, but this may not be necessary in future Quarto updates.\n\n\n\n\n\n\nInsert citation via its DOI using RStudio Visual Editor\n\n\n\n\n\n\n\n\n\n\nPublishing notes\nIf the book’s output is strictly html, there’s no need to specify output-dir in _quarto.yml. The output directory default is _book/, which is what we’d like. If we wanted other types of output like like PDF or EPUB, etc. those single file outputs are also written to the output-dir (Quarto docs).\nIf you currently have a docs/ folder, delete it.\nUpdate .gitignore to ignore _book/. At the same time, we have it ignore caches and a .quarto file:\n/.quarto/\n*_cache/\n_book/\nOnce all is settled, delete _output.yml.\nOnce the Openscapes fork was fully reviewed, we made a pull request from that to the main branch of the book’s repo. Once that was merged, we set up GitHub Actions to render the book. (TODO: instructions for GitHub Actions)\n\n\nGitHub Actions\nThis book was mostly prose and screenshots without any R code. This made the conversion from RMarkdown to Quarto likely more straightforward than if you also needed to adjust code chunk options in the quarto style (#|). Our initial GitHub Action to render the converted Faylab Lab Manual failed because we had a piece of R code - even though the code was commented out! This was resolved when we deleted the line."
  },
  {
    "objectID": "transition-from-rmarkdown.html#distill-to-quarto",
    "href": "transition-from-rmarkdown.html#distill-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Distill to quarto",
    "text": "Distill to quarto\nWe transitioned our events site from distill to quarto in May 2022 (github view before and after). We followed excellent notes and examples from Nick Tierney and Danielle Navarro.\nAfter we had changed all the files, the Build tab in the RStudio IDE still showed “Build website” rather then “Render Website” and “Preview Website”, and would error when we pushed them (because that button was expecting a distill site, not a quarto site). To fix this, we updated the .Rproj file. Clicking on the .Rproj file in the RStudio IDE will open a dialog box where you can click things you want (you can also open these in a text editor or from the GitHub website to see the actual text). To fix this situation with the Build tab: Project Options &gt; Build Tools &gt; Project Build Tools &gt; None.\nLooking at files /posts/_metadata.yml and _quarto.yml helps see where things are defined. For example, to make event post citations appear, we added citation: true to /posts/_metadata.yml and in _quarto.yml under the website key we set site-url: https://openscapes.github.io/events. We deleted footer.html used with distill because footer is now defined in quarto.yml.\n\nPublishing notes\n\nBackground: Our distill site had been set up to output to a docs folder, and had GitHub Settings &gt; Pages set to look there rather gh-pages branch. (Julie note: this was a new-to-me capability when we set up the events distill site in Spring 2021 so I had forgotten that was an option). We’ve inititally kept this same set-up for now with our events page in _quarto.yml: output-dir: docs. However, this is sub-optimal; better to not have to commit and push these files but to instead have a GitHub Action generate them upon a commit. So the following is what we did -\n\nDon’t specify output-dir in _quarto.yml. The output directory default is _site/, which is what we’d like.\nIf you currently have a docs/ folder (like we did as we were experimenting), delete it.\nUpdate .gitignore to ignore _site/. At the same time, we have it ignore caches and a .quarto file:\n/.quarto/\n*_cache/\n_site/\nPush these changes, merge into main.\nOn GitHub.com, in your repo, set up GitHub publishing\nFollow instructions from the explore and setup chapter."
  },
  {
    "objectID": "transition-from-rmarkdown.html#troubleshooting",
    "href": "transition-from-rmarkdown.html#troubleshooting",
    "title": "Transition from RMarkdown",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nGitHub Action fails, says you need RMarkdown but you don’t have R code!\nAnd you changed all .Rmds to .qmds!\nYou likely have a few setup code chunks from RMarkdown, that look like this:\n{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\nYou can find them by opening each of your files and having a look, or use GitHub’s search for the keyword knitr"
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results.html",
    "href": "approaches/dynamic-client/e2e-results.html",
    "title": "Benchmarking: Individual Results",
    "section": "",
    "text": "The CarbonPlan team put together some utilities for parsing, processing, and visualizing the benchmarking results in carbonplan_benchmarks. We’ll use those utilities along with the Holoviz HoloViz suite of tools for visualization to show some individual benchmarking results.\n\nimport carbonplan_benchmarks.analysis as cba\nimport holoviews as hv\nimport hvplot.pandas\nimport pandas as pd\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefine URIs for the baseline images and metadata\n\nbaseline_fp = \"s3://carbonplan-benchmarks/benchmark-data/v0.2/baselines.json\"\nurl_filter = \"carbonplan-benchmarks.s3.us-west-2.amazonaws.com/data/\"\nmetadata_fp = (\n    \"s3://carbonplan-benchmarks/benchmark-data/v0.2/data-2023-08-24T00-33-44.json\"\n)\n\nDefine some plot options\n\nplt_opts = {\"width\": 500, \"height\": 200}\n\nLoad the data and baseline images\n\nmetadata, trace_events = cba.load_data(metadata_path=metadata_fp, run=0)\nsnapshots = cba.load_snapshots(snapshot_path=baseline_fp)\n\nProcess the data\n\ndata = cba.process_run(\n    metadata=metadata, trace_events=trace_events, snapshots=snapshots\n)\n\nCreate summary statistics\n\ncba.create_summary(metadata=metadata, data=data, url_filter=url_filter)\n\n\n\n\n\n\n\n\naction\napproach\nbenchmark_version\nbrowser_name\nbrowser_version\nheadless\nplaywright_python_version\nprovider\nrun_number\ntimeout\n...\nfiltered_requests_average_encoded_data_length\nfiltered_requests_maximum_encoded_data_length\nzoom\nduration\nmin_rmse\nfps\nrequest_duration\nrequest_percent\nnon_request_duration\nactual_chunk_size\n\n\ndataset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n63488.00\n125345.0\n0.0\n2313.558\n0.0\n59.648386\n408.764\n17.668198\n1904.794\n0.524288\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n111303.25\n206084.0\n1.0\n2468.501\n0.0\n60.360518\n1365.362\n55.311381\n1103.139\n0.524288\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n157726.00\n342805.0\n2.0\n1591.088\n0.0\n60.336072\n987.093\n62.038869\n603.995\n0.524288\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n164329.00\n334586.0\n3.0\n1229.950\n0.0\n59.352006\n593.159\n48.226269\n636.791\n0.524288\n\n\n\n\n4 rows × 34 columns\n\n\n\nPlot the requests, frames, and baseline comparisons\n\nrequests_plt = cba.plot_requests(data[\"request_data\"], url_filter=url_filter).opts(\n    **plt_opts\n)\nframes_plt = cba.plot_frames(data[\"frames_data\"], yl=2.5).opts(**plt_opts)\nrmse_plt = cba.plot_screenshot_rmse(\n    screenshot_data=data[\"screenshot_data\"], metadata=metadata\n).opts(**plt_opts)\n(requests_plt + frames_plt + rmse_plt).cols(1)\n\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_drag' property; using the latest value\n  layout_plot = gridplot(\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_scroll' property; using the latest value\n  layout_plot = gridplot("
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results.html#processing-benchmark-results",
    "href": "approaches/dynamic-client/e2e-results.html#processing-benchmark-results",
    "title": "Benchmarking: Individual Results",
    "section": "",
    "text": "The CarbonPlan team put together some utilities for parsing, processing, and visualizing the benchmarking results in carbonplan_benchmarks. We’ll use those utilities along with the Holoviz HoloViz suite of tools for visualization to show some individual benchmarking results.\n\nimport carbonplan_benchmarks.analysis as cba\nimport holoviews as hv\nimport hvplot.pandas\nimport pandas as pd\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefine URIs for the baseline images and metadata\n\nbaseline_fp = \"s3://carbonplan-benchmarks/benchmark-data/v0.2/baselines.json\"\nurl_filter = \"carbonplan-benchmarks.s3.us-west-2.amazonaws.com/data/\"\nmetadata_fp = (\n    \"s3://carbonplan-benchmarks/benchmark-data/v0.2/data-2023-08-24T00-33-44.json\"\n)\n\nDefine some plot options\n\nplt_opts = {\"width\": 500, \"height\": 200}\n\nLoad the data and baseline images\n\nmetadata, trace_events = cba.load_data(metadata_path=metadata_fp, run=0)\nsnapshots = cba.load_snapshots(snapshot_path=baseline_fp)\n\nProcess the data\n\ndata = cba.process_run(\n    metadata=metadata, trace_events=trace_events, snapshots=snapshots\n)\n\nCreate summary statistics\n\ncba.create_summary(metadata=metadata, data=data, url_filter=url_filter)\n\n\n\n\n\n\n\n\naction\napproach\nbenchmark_version\nbrowser_name\nbrowser_version\nheadless\nplaywright_python_version\nprovider\nrun_number\ntimeout\n...\nfiltered_requests_average_encoded_data_length\nfiltered_requests_maximum_encoded_data_length\nzoom\nduration\nmin_rmse\nfps\nrequest_duration\nrequest_percent\nnon_request_duration\nactual_chunk_size\n\n\ndataset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n63488.00\n125345.0\n0.0\n2313.558\n0.0\n59.648386\n408.764\n17.668198\n1904.794\n0.524288\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n111303.25\n206084.0\n1.0\n2468.501\n0.0\n60.360518\n1365.362\n55.311381\n1103.139\n0.524288\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n157726.00\n342805.0\n2.0\n1591.088\n0.0\n60.336072\n987.093\n62.038869\n603.995\n0.524288\n\n\npyramids-v2-3857-True-256-1-0-0-f4-0-0-0-gzipL1-100\nzoom_in\ndynamic-client\nv0.2\nchromium\n116.0.5845.82\nTrue\n1.37.0\naws\n1\nFalse\n...\n164329.00\n334586.0\n3.0\n1229.950\n0.0\n59.352006\n593.159\n48.226269\n636.791\n0.524288\n\n\n\n\n4 rows × 34 columns\n\n\n\nPlot the requests, frames, and baseline comparisons\n\nrequests_plt = cba.plot_requests(data[\"request_data\"], url_filter=url_filter).opts(\n    **plt_opts\n)\nframes_plt = cba.plot_frames(data[\"frames_data\"], yl=2.5).opts(**plt_opts)\nrmse_plt = cba.plot_screenshot_rmse(\n    screenshot_data=data[\"screenshot_data\"], metadata=metadata\n).opts(**plt_opts)\n(requests_plt + frames_plt + rmse_plt).cols(1)\n\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_drag' property; using the latest value\n  layout_plot = gridplot(\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_scroll' property; using the latest value\n  layout_plot = gridplot("
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results-zarr-version.html",
    "href": "approaches/dynamic-client/e2e-results-zarr-version.html",
    "title": "Benchmarking: Zarr Version",
    "section": "",
    "text": "import hvplot\nimport holoviews as hv\nimport pandas as pd\nimport hvplot.pandas  # noqa\n\nimport statsmodels.formula.api as smf\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\nRead summary of all benchmarking results.\n\nsummary = pd.read_parquet(\"s3://carbonplan-benchmarks/benchmark-data/v0.2/summary.parq\")\n\nSubset the data to isolate the impact of Zarr version and chunk size.\n\ndf = summary[\n    (summary[\"projection\"] == 4326)\n    & (summary[\"pixels_per_tile\"] == 128)\n    & (summary[\"shard_size\"] == 0)\n    & (summary[\"region\"] == \"us-west-2\")\n]\n\nSet plot options.\n\ncmap = [\"#E1BE6A\", \"#40B0A6\"]\nplt_opts = {\"width\": 600, \"height\": 400}\n\nCreate a box plot showing how the rendering time depends on Zarr version and chunk size.\n\ndf.hvplot.box(\n    y=\"duration\",\n    by=[\"actual_chunk_size\", \"zarr_version\"],\n    c=\"zarr_version\",\n    cmap=cmap,\n    ylabel=\"Time to render (ms)\"\",\n    xlabel=\"Chunk size (MB); Zarr Version\",\n    legend=False,\n).opts(**plt_opts)\n\n\n\n\n\n  \n\n\n\n\nFit a multiple linear regression to the results. The results show that the chunk size strongly impacts the action duration. Datasets with larger chunk sizes take longer to render. The Zarr version does not have a noticeable impact on rendering time.\n\nmodel = smf.ols(\"duration ~ actual_chunk_size + C(zarr_version)\", data=df).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.511\n\n\nModel:\nOLS\nAdj. R-squared:\n0.507\n\n\nMethod:\nLeast Squares\nF-statistic:\n132.4\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n4.58e-40\n\n\nTime:\n20:16:42\nLog-Likelihood:\n-2050.1\n\n\nNo. Observations:\n256\nAIC:\n4106.\n\n\nDf Residuals:\n253\nBIC:\n4117.\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2066.9020\n82.158\n25.158\n0.000\n1905.102\n2228.702\n\n\nC(zarr_version)[T.3]\n-17.5790\n91.439\n-0.192\n0.848\n-197.657\n162.499\n\n\nactual_chunk_size\n84.7372\n5.208\n16.269\n0.000\n74.480\n94.995\n\n\n\n\n\n\nOmnibus:\n37.985\nDurbin-Watson:\n1.955\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n52.057\n\n\nSkew:\n-0.953\nProb(JB):\n4.96e-12\n\n\nKurtosis:\n4.116\nCond. No.\n31.2\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nShow the rendering time at different zoom levels.\n\nplt_opts = {\"width\": 400, \"height\": 300}\n\nplts = []\n\nfor zoom_level in range(4):\n    df_level = df[df[\"zoom\"] == zoom_level]\n    plts.append(\n        df_level.hvplot.box(\n            y=\"duration\",\n            by=[\"actual_chunk_size\", \"zarr_version\"],\n            c=\"zarr_version\",\n            cmap=cmap,\n            ylabel=\"Time to render (ms)\"\",\n            xlabel=\"Chunk size (MB); Zarr version\",\n            legend=False,\n            title=f\"Zoom level {zoom_level}\",\n        ).opts(**plt_opts)\n    )\nhv.Layout(plts).cols(2)\n\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_drag' property; using the latest value\n  layout_plot = gridplot(\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_scroll' property; using the latest value\n  layout_plot = gridplot(\n\n\n\n\n\n\n  \n\n\n\n\nAdd a multiplicative interaction term with zoom level to the multiple linear regression. The results show that chunk size has a significant impact on rendering performance at higher zoom levels, with the most pronounced affect at zoom level 3.\n\nmodel = smf.ols(\"duration ~ actual_chunk_size * C(zoom)\", data=df).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.919\n\n\nModel:\nOLS\nAdj. R-squared:\n0.917\n\n\nMethod:\nLeast Squares\nF-statistic:\n401.4\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n2.29e-131\n\n\nTime:\n20:16:43\nLog-Likelihood:\n-1820.2\n\n\nNo. Observations:\n256\nAIC:\n3656.\n\n\nDf Residuals:\n248\nBIC:\n3685.\n\n\nDf Model:\n7\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2274.2785\n56.178\n40.484\n0.000\n2163.633\n2384.925\n\n\nC(zoom)[T.1.0]\n171.4040\n79.447\n2.157\n0.032\n14.927\n327.881\n\n\nC(zoom)[T.2.0]\n-595.6177\n79.447\n-7.497\n0.000\n-752.095\n-439.141\n\n\nC(zoom)[T.3.0]\n-440.4506\n79.447\n-5.544\n0.000\n-596.928\n-283.974\n\n\nactual_chunk_size\n-6.0398\n4.286\n-1.409\n0.160\n-14.482\n2.403\n\n\nactual_chunk_size:C(zoom)[T.1.0]\n71.2072\n6.062\n11.747\n0.000\n59.268\n83.147\n\n\nactual_chunk_size:C(zoom)[T.2.0]\n140.8571\n6.062\n23.236\n0.000\n128.918\n152.796\n\n\nactual_chunk_size:C(zoom)[T.3.0]\n151.0435\n6.062\n24.917\n0.000\n139.104\n162.983\n\n\n\n\n\n\nOmnibus:\n23.536\nDurbin-Watson:\n1.445\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n39.029\n\n\nSkew:\n0.545\nProb(JB):\n3.35e-09\n\n\nKurtosis:\n4.572\nCond. No.\n94.1\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "approaches/dynamic-client/future-areas.html",
    "href": "approaches/dynamic-client/future-areas.html",
    "title": "Future Areas",
    "section": "",
    "text": "COMING SOON."
  },
  {
    "objectID": "approaches/dynamic-client/recommendations.html",
    "href": "approaches/dynamic-client/recommendations.html",
    "title": "Recommendations",
    "section": "",
    "text": "COMING SOON."
  },
  {
    "objectID": "approaches/dynamic-client/costs.html",
    "href": "approaches/dynamic-client/costs.html",
    "title": "Costs",
    "section": "",
    "text": "COMING SOON."
  },
  {
    "objectID": "approaches/dynamic-client/prototype-deployment.html",
    "href": "approaches/dynamic-client/prototype-deployment.html",
    "title": "Prototype Deployment",
    "section": "",
    "text": "We started the prototype-maps project to support visualizing Zarr data using multiple approaches in a consolidated application. The project is currently deployed at https://prototype-maps.vercel.app/. Only the dynamic client approach is currently live, although the tiling approach will be added shortly. The current version of the dynamic client page includes the option to select from several different datasets. Datasets are available in either Zarr V2 or Zarr V3 format, with different projections (equirectangular or mercator), chunking schemes (~1MB/chunk, ~5MB/chunk, ~10MB/chunk, or ~25MB/chunk), and sharding schemes (none, ~50MB/shard, ~100MB/shard). The time slider allows scrolling through the two years of daily data included in this demonstration. Options for adjusting the color mapping and visualizing time series are included in drop-down windows, with the spatial selector allowing custom selection of the data window averaged for the time series."
  },
  {
    "objectID": "approaches/dynamic-client/prototype-deployment.html#prototype-maps",
    "href": "approaches/dynamic-client/prototype-deployment.html#prototype-maps",
    "title": "Prototype Deployment",
    "section": "",
    "text": "We started the prototype-maps project to support visualizing Zarr data using multiple approaches in a consolidated application. The project is currently deployed at https://prototype-maps.vercel.app/. Only the dynamic client approach is currently live, although the tiling approach will be added shortly. The current version of the dynamic client page includes the option to select from several different datasets. Datasets are available in either Zarr V2 or Zarr V3 format, with different projections (equirectangular or mercator), chunking schemes (~1MB/chunk, ~5MB/chunk, ~10MB/chunk, or ~25MB/chunk), and sharding schemes (none, ~50MB/shard, ~100MB/shard). The time slider allows scrolling through the two years of daily data included in this demonstration. Options for adjusting the color mapping and visualizing time series are included in drop-down windows, with the spatial selector allowing custom selection of the data window averaged for the time series."
  },
  {
    "objectID": "approaches/dynamic-client/prototype-deployment.html#prototype-maps-technology-stack",
    "href": "approaches/dynamic-client/prototype-deployment.html#prototype-maps-technology-stack",
    "title": "Prototype Deployment",
    "section": "prototype-maps: Technology stack",
    "text": "prototype-maps: Technology stack\nThe prototype deployment was built using @carbonplan/maps with different configurations of projection and Zarr version, for which support was added in 3.1.0. Upstream, the @carbonplan/maps library depends on zarr-js@3.3.0, for support reading Zarr in v3 and sharded formats as well as mapbox-gl@1.13.1 for the mapping context in which the Zarr data are rendered."
  },
  {
    "objectID": "approaches/tiling/future-areas.html",
    "href": "approaches/tiling/future-areas.html",
    "title": "Future Areas",
    "section": "",
    "text": "Future Areas\nCOMING SOON."
  },
  {
    "objectID": "approaches/tiling/tile-server-e2e-benchmarks.html",
    "href": "approaches/tiling/tile-server-e2e-benchmarks.html",
    "title": "Tile Server End to End Benchmakrs",
    "section": "",
    "text": "This notebook parses results from end-to-end testing as documented in tile-benchmarking/e2e/e2e.ipynb."
  },
  {
    "objectID": "approaches/tiling/tile-server-e2e-benchmarks.html#setup",
    "href": "approaches/tiling/tile-server-e2e-benchmarks.html#setup",
    "title": "Tile Server End to End Benchmakrs",
    "section": "Setup",
    "text": "Setup\nImport libraries, define results location and define plotting functions.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n                        \ngit_url_path = \"https://raw.githubusercontent.com/developmentseed/tile-benchmarking/main/e2e\"\n\ndef generate_zooms_plot(df, dataset):\n    zooms = [int(path.split('/')[2]) for path in df['Name'][:-1]]\n    # Create a new figure\n    plt.figure()\n\n    # Create a scatter plot\n    plt.scatter(zooms, df['Median Response Time'][:-1])\n\n    # Add title and labels\n    plt.title(dataset)\n    plt.xlabel('Zoom')\n    plt.ylabel('Time (ms)')\n\n    # Display the plot\n    plt.show() \n    \ndef git_url(filename):\n    return f'{git_url_path}/{filename}'\n\ndef add_to_specs(collection_name: str, df: pd.DataFrame):\n    zarr_specs.loc[collection_name, 'mean median response time'] = np.mean(df['Median Response Time'])\n    zarr_specs.loc[collection_name, 'median median response time'] = np.median(df['Median Response Time'])"
  },
  {
    "objectID": "approaches/tiling/tile-server-e2e-benchmarks.html#parse-collection-results-into-a-data-frame",
    "href": "approaches/tiling/tile-server-e2e-benchmarks.html#parse-collection-results-into-a-data-frame",
    "title": "Tile Server End to End Benchmakrs",
    "section": "Parse collection results into a data frame",
    "text": "Parse collection results into a data frame\nBenchmarks are reported alongside specifications of the dataset, such as chunk shape and size.\n\nzarr_specs = pd.read_csv(f\"{git_url_path}/zarr_info.csv\")\nzarr_specs.index = zarr_specs['collection_name']\n\nfor collection_name in zarr_specs.index:\n    filename = f'results/{collection_name}_urls_stats.csv'\n    results_df = pd.read_csv(git_url(filename))\n    add_to_specs(collection_name, results_df)"
  },
  {
    "objectID": "approaches/tiling/benchmarking-methodology.html",
    "href": "approaches/tiling/benchmarking-methodology.html",
    "title": "Benchmarking Methodology",
    "section": "",
    "text": "Benchmarks are provided for a deployed API (end-to-end tests, described below) as well as for the underlying code."
  },
  {
    "objectID": "approaches/tiling/benchmarking-methodology.html#code-benchmarks",
    "href": "approaches/tiling/benchmarking-methodology.html#code-benchmarks",
    "title": "Benchmarking Methodology",
    "section": "Code Benchmarks",
    "text": "Code Benchmarks\nWhile end-to-end benchmarks establish tiling performance as experienced by an end user, the introduction of the network of the requesting client and responding server introduce variables which are difficult to control. The authors replicated and tested the tiling code to diagnose slowness due to data and code, without the introduction of a network.\n\nCode Benchmarks: Datasets\nReproducibility is important to the integrity of this project and its results. We used a publicly available dataset and attempt to make the steps as fully documented and reproducible as possible. For code profiling, we focused the NASA Earth Exchange Global Daily Downscaled Projections (NEX-GDDP-CMIP6) AWS public dataset for this project.\nThere are 2 datasets listed on AWS from this project. One (1) is an archive of NetCDF files from about 35 different climate models, each supplying historical and predicted values for up to 9 environment variables, daily, from 1950 to 2100. To minimize preprocessing, test datasets were generated for the first 2 years of historical data, for 1 model and for 1 variable. These variables or dataset could easily be modified or swapped, but we expect the relative performance using different datasets to be the same.\nIn addition to the NetCDF data, there is an archives of COGs generated from that NetCDF data to support visualization via dynamic tiling using COGs. COGs are only available for 2 models, so for intercomparison of the tiling approach between COGs and Zarr, one of those models (GISS-E2-1-G) is used to generate Zarr stores.\nTODO: At this time, a different model is used for the direct client benchmarks (ACCESS-CM2), but we plan to demonstrate how there is no meaningful difference in the performance of tiling across these models.\nCode profiling for the tiling approach were run on the VEDA JupyterHub. The VEDA documentation details how to request access: https://nasa-impact.github.io/veda-docs/services/jupyterhub.html. We chose not to make the database or S3 bucket nasa-eodc-data-store fully public, you must be logged into the VEDA JupyterHub to run those benchmarks or reproduce the test datasets, which should be possible via code in tile-benchmarking.\n\n\nCode Benchmarks: Approach\nWe include performance results of code for tiling both COGs and Zarr to help data providers decide which format better suits their overall needs. To make these results comparable, we assume the following process for creating image tiles:\n\nAssume you are starting with a known collection and query parameters\nRead metadata\n\nFor COGs, the query is registered with pgSTAC for the collection id and query parameters, such as variable and datetime.\nFor Zarr, the metadata is “lazily loaded” for the variable and temporal extent from the known collection store.\n\nGenerate tiles\n\nFor COGs, the mosaic ID returned from the registered query is used to read chunks from COGs on S3.\nFor Zarr, the metadata is used by xarray to read chunks from NetCDFs or Zarrs on S3 and the XarrayReader of rio_tiler is used to generate tiles.\n\n\nTo make as close to an “apples to apples” comparison as possible, we have stored COG metadata using pgSTAC for data in the nex-gddp-cmip6-cog bucket in AWS Relational Database Service (RDS) and Zarr metadata and data files in S3.\nTo profile the code for rendering tiles with both XarrayReader and titiler-pgstac, code was copied from those projects as needed to inject timers, print logs from the s3fs library and used the cprofile library.\n\n\nReview Results\n\nCOG Tile Server Benchmarks\nZarr Tile Server Benchmarks"
  },
  {
    "objectID": "approaches/tiling/benchmarking-methodology.html#end-to-end-benchmarks",
    "href": "approaches/tiling/benchmarking-methodology.html#end-to-end-benchmarks",
    "title": "Benchmarking Methodology",
    "section": "End-to-End Benchmarks",
    "text": "End-to-End Benchmarks\nEnd-to-end tests provide benchmarks of response times for various tiles and datasets to titiler-xarray.\nDetails and code to generate the benchmarks and store the results on S3 is documented in tile-benchmarking/e2e/e2e.ipynb.\n\nEnd-to-End Benchmarks: Datasets\nA variety of datasets was selected for end-to-end testing and hopefully the framework makes it easy to modify and test new datasets and use cases come up. See the e2e-results.ipynb for specific datasets.\n\n\nEnd-to-End Benchmarks: Approach\nCode from https://github.com/bdon/TileSiege was used to generate a set of tile URLs for the selected test datasets. The testing tool https://locust.io/ was used to run tests. Results are stored uploated as CSV files in S3. These results are read and plotted in e2e-results.ipynb."
  },
  {
    "objectID": "approaches/index.html",
    "href": "approaches/index.html",
    "title": "Approaches",
    "section": "",
    "text": "For browser-based visualization of Zarr, there are 2 approaches covered in this cookbook:\n\nTiling\nDynamic client\n\nThe tile server provides an API which is interoperable with multiple interfaces, but requires maintaining a tile server. also the response delivered to the client is an image format, not the raw data itself. The dynamic client approach has access to the underlying data and thus maximum flexibility in rendering and analysis for the user."
  },
  {
    "objectID": "approaches/dynamic-client.html",
    "href": "approaches/dynamic-client.html",
    "title": "Dynamic Client",
    "section": "",
    "text": "Traditional approaches to rendering raster datasets in the browser involve the creation of tiles in a pixelated image format like PNG or JPEG. These tiles can be pre-generated or created by a tiling server on demand, as described in the tiling approach chapter. While the image tiles are fast to load and easy to render, tiling offers limited flexibility for dynamically customizing visualizations based on user input. In contrast, dynamic client leverages Zarr to render the data directly using WebGL rather than through an intermediate layer. The Zarr format is ideal for direct rendering in the browser because the chunks of a Zarr dataset serve a similar purpose to the tiles of a web map. In addition, data can be chunked across non-spatial dimensions like time, which removes the requirement of generating individual tiles per time step. Lastly, Zarr is a cloud-optimized data format Zarr that allows for fast, parallel reading and writing from object storage.\nThe dynamic client approach leverages pyramids created with the ndpyramid package in order to performantly render data at multiple zoom levels. The approach loads Zarr data using the zarr-js JavaScript library and renders the fetched chunks via WebGL using the regl library. The open-source library called @carbonplan/maps provides a small set of React components for loading and rendering Zarr data using this approach and supports rendering traditional vector layers side-by-side using mapbox-gl-js.\nCarbonPlan has used this approach to quickly develop visualizations for climate science (some example visualizations).\n\n\nHistorically, building these visualizations has required creating a second, visualization-specific copy of the data. The primary factor being the gap between the low limit of request sizes that can be reasonably fetched by the browser (&lt;10 MB) and the conventional Zarr chunk sizes (~100 MB) used for analysis. With the introduction of the sharding extension to the Zarr V3 spec, both access patterns can now be accommodated by a single dataset.\n\n\n\nPyramids are used to improve rendering performance for most web mapping approaches. Pyramids contain successively lower resolution versions of the same dataset, which are commonly referred to as zoom levels or overviews. When viewing the entire dataset, the coarsest zoom level can be quickly fetched and rendered. Finer zoom levels are smoothly fetched and rendered as the user zooms in.\nThe dynamic client approach currently relies on pyramids in the Zarr stores, although we will explore relaxing this requirement in the future. ndpyramid is a small Python package providing utilities for generating N-dimensional Zarr pyramids using Xarray. Ndpyramid currently generates pyramids through either reprojection or coarsening. The prior requirement of web mercator pyramids has been removed from the dynamic client approach in the interest of directly visualizing analysis-ready datasets. The data can be reprojected in the client itself instead."
  },
  {
    "objectID": "approaches/dynamic-client.html#background",
    "href": "approaches/dynamic-client.html#background",
    "title": "Dynamic Client",
    "section": "",
    "text": "Traditional approaches to rendering raster datasets in the browser involve the creation of tiles in a pixelated image format like PNG or JPEG. These tiles can be pre-generated or created by a tiling server on demand, as described in the tiling approach chapter. While the image tiles are fast to load and easy to render, tiling offers limited flexibility for dynamically customizing visualizations based on user input. In contrast, dynamic client leverages Zarr to render the data directly using WebGL rather than through an intermediate layer. The Zarr format is ideal for direct rendering in the browser because the chunks of a Zarr dataset serve a similar purpose to the tiles of a web map. In addition, data can be chunked across non-spatial dimensions like time, which removes the requirement of generating individual tiles per time step. Lastly, Zarr is a cloud-optimized data format Zarr that allows for fast, parallel reading and writing from object storage.\nThe dynamic client approach leverages pyramids created with the ndpyramid package in order to performantly render data at multiple zoom levels. The approach loads Zarr data using the zarr-js JavaScript library and renders the fetched chunks via WebGL using the regl library. The open-source library called @carbonplan/maps provides a small set of React components for loading and rendering Zarr data using this approach and supports rendering traditional vector layers side-by-side using mapbox-gl-js.\nCarbonPlan has used this approach to quickly develop visualizations for climate science (some example visualizations).\n\n\nHistorically, building these visualizations has required creating a second, visualization-specific copy of the data. The primary factor being the gap between the low limit of request sizes that can be reasonably fetched by the browser (&lt;10 MB) and the conventional Zarr chunk sizes (~100 MB) used for analysis. With the introduction of the sharding extension to the Zarr V3 spec, both access patterns can now be accommodated by a single dataset.\n\n\n\nPyramids are used to improve rendering performance for most web mapping approaches. Pyramids contain successively lower resolution versions of the same dataset, which are commonly referred to as zoom levels or overviews. When viewing the entire dataset, the coarsest zoom level can be quickly fetched and rendered. Finer zoom levels are smoothly fetched and rendered as the user zooms in.\nThe dynamic client approach currently relies on pyramids in the Zarr stores, although we will explore relaxing this requirement in the future. ndpyramid is a small Python package providing utilities for generating N-dimensional Zarr pyramids using Xarray. Ndpyramid currently generates pyramids through either reprojection or coarsening. The prior requirement of web mercator pyramids has been removed from the dynamic client approach in the interest of directly visualizing analysis-ready datasets. The data can be reprojected in the client itself instead."
  },
  {
    "objectID": "approaches/dynamic-client.html#references",
    "href": "approaches/dynamic-client.html#references",
    "title": "Dynamic Client",
    "section": "References",
    "text": "References\nFreeman, J., K. Martin, and J. Hamman, 2021: A new toolkit for data-driven maps, https://carbonplan.org/blog/maps-library-release"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Zarr Visualization Cookbook",
    "section": "",
    "text": "This site documents different approaches and benchmarks for zarr visualization. If you use or create Zarr data and wish to visualize it in a web browser, this guide is for you. It describes the requirements for data pre-processing and chunking in order to support visualization through tiling server and dynamic client approahces."
  },
  {
    "objectID": "index.html#pre-generated-map-tiles---drawbacks",
    "href": "index.html#pre-generated-map-tiles---drawbacks",
    "title": "Zarr Visualization Cookbook",
    "section": "Pre-generated Map Tiles - Drawbacks",
    "text": "Pre-generated Map Tiles - Drawbacks\nThe challenge of visualizing large geospatial datasets led to the development of pre-generated static map tiles. While pregenerated map tiles make it possible to visualize data quickly, there are drawbacks. The most significant drawback is the data provider chooses how the data will appear. Next generation approaches give that power to the user. Other drawbacks impact the data provider, such as storage costs and maintaining a pipeline to constantly update or reprocess the tile storage with new and updated data. But the user is impacted by having no power to adjust the visualization, such as modifying the color scale, color map or perform “band math” where multiple variables are combined to produce a new variable."
  },
  {
    "objectID": "index.html#new-approaches",
    "href": "index.html#new-approaches",
    "title": "Zarr Visualization Cookbook",
    "section": "New Approaches",
    "text": "New Approaches\nMore recent years have seen the success of the dynamic tiling approach which allows for on-demand map tile creation. This approach has traditionally relied on reading data from Cloud-Optimized GeoTIFFs (COGs). When the Zarr data format gained popularity for large-scale N-dimensional data analysis, users started to ask for browser-based visualization. The conventional Zarr chunk size stored for analysis (~100MB) was acknowledged to be too large to be fetched by a browser.\nNow there are two options for visualizing Zarr data: a tile server and dynamic client. rio_tiler’s XarrayReader supports tile rendering from anything that is xarray-readable. This means a tile server can render tiles from Zarr stores as well as netCDF4/HDF5 and other formats. However, a tile server still requires running a server while the second option, “dynamic client”, reads Zarr directly in the browser client and uses webGL to render map tiles."
  },
  {
    "objectID": "index.html#cookbook-goals",
    "href": "index.html#cookbook-goals",
    "title": "Zarr Visualization Cookbook",
    "section": "Cookbook Goals",
    "text": "Cookbook Goals\nThis cookbook will describe these two approaches. We will discuss the tradeoffs, pre-processing options and provide performance benchmarks for a variety of data configurations. We hope readers will be able to reuse lessons learned and recommendations to deliver their Zarr data to users in web browser and contribute to the wider adoption of this format for large scale environmental data understanding."
  },
  {
    "objectID": "approaches/tiling.html",
    "href": "approaches/tiling.html",
    "title": "Tiling",
    "section": "",
    "text": "An xarray tile server provides image tiles via the XYZ Protocol and OGC Tiles API specifications.\nThe tile server approach relies on the rio_tiler.XarrayReader library which includes the tile function. This module supports tiling of anything that is xarray-readable, so a tile server using this library can render tiles from Zarr stores as well as netCDF4/HDF5 and other formats. An example API infrastructure can be found in titiler-xarray. Please note this library is still in development and is not intended for production use at this time."
  },
  {
    "objectID": "approaches/tiling/cmip6-cog-tile-server-benchmarks.html",
    "href": "approaches/tiling/cmip6-cog-tile-server-benchmarks.html",
    "title": "CMIP6 COG Tile Server Benchmarks",
    "section": "",
    "text": "As noted in Benchmarking Methodolgy, the time to tile includes the time to query a pgSTAC database and then use the query ID returned to read and create image tiles from COGs on S3. The libraries used were pgSTAC for reading STAC metadata and rasterio (via rio_tiler) for reading COGs on S3.\nIn this notebook we load results from https://github.com/developmentseed/tile-benchmarking/blob/main/profiling/profile.ipynb to demonstrate:\n\nThe importance of GDAL variables in performance.\nVariation across tiles is not significant.\nTiling with pgSTAC + COGs is fast when compared with the rio_tiler.XarrayReader method.\n\n\nimport pandas as pd\nimport hvplot\npd.options.plotting.backend = 'holoviews'\n\ngit_url_path = \"https://raw.githubusercontent.com/developmentseed/tile-benchmarking/feat/fake-data/profiling/results\"\npd.read_csv(f\"{git_url_path}/pgstac_cog_gdal_results.csv\")\n\n\n\n\n\n\n\n\ngdal_vars_set?\ntile times\nmean total time\n\n\n\n\n0\nwith_gdal_vars\n[63.41, 54.53, 54.46]\n57.466667\n\n\n1\nwithout_gdal_vars\n[14687.78, 30817.34, 17722.72]\n21075.946667\n\n\n\n\n\n\n\nWe don’t need many iterations since the variation is so great. You can see that setting GDAL environment variables makes things at least 100x faster.\nThese GDAL variables are documented here https://developmentseed.org/titiler/advanced/performance_tuning/, but that advice is copied into comments below for ease of reference.\nBy setting the GDAL environment variables we limit the number of total requests to S3.\nSpecifically, these environment variables ensure that:\n\nAll of the metadata may be read in 1 request. This is not necessarily true, but more likely since we increase the initial number of GDAL ingested bytes.\nThere are no extra LIST requests which GDAL uses to discover sidecar files. COGs don’t have sidecar files.\nConsecutive range requests are merged into 1 request.\nMultiple range requests use the same TCP connection.\n\n\nTime to create different tiles\nNote the speed of tiling is always around 50ms and the difference across tiles is small.\n\ndf = pd.read_csv(f\"{git_url_path}/pgstac_cog_tile_results.csv\")\ndf.plot.scatter(x='xyz tile', y='mean total time', label = 'Mean Time to Tile (ms) by Zoom Level')"
  },
  {
    "objectID": "approaches/tiling/recommendations.html",
    "href": "approaches/tiling/recommendations.html",
    "title": "Recommendations",
    "section": "",
    "text": "Recommendations\nCOMING SOON."
  },
  {
    "objectID": "approaches/tiling/cmip6-zarr-tile-server-benchmarks.html",
    "href": "approaches/tiling/cmip6-zarr-tile-server-benchmarks.html",
    "title": "CMIP6 Zarr Tile Server Benchmarks",
    "section": "",
    "text": "Benchmarks were generated for multiple copies of the CMIP6 daily data to understand the performance for different data pre-processing options. These copies were differentiated by:\n\ndata file format (netCDF or Zarr), and,\ndifferent chunking configurations.\n\nThe test datasets produced and benchmarked are:\n\nkerchunk + netCDF: A kerchunk reference file for NetCDF files stored on S3.\n3 Zarr stores with different chunking configurations and pyramids.\n\nChunked to optimize for time series analysis:\n\nlatitude: 252, longitude: 252, time: 365.\nThis dataset has larger chunks, but more timesteps are loaded into each chunk.\n\nChunked to optimize for visualization at a single time step.\n\nlatitude: 600, longitude: 1440, time: 1.\nThis dataset has small chunks, but will likely not work well for time series generation.\n\nChunked to optimize for both time series and visualization:\n\nlatitude: 600, longitude: 1440, time: 29.\nThis dataset has larger chunks, but more timesteps are loaded into each chunk.\n\n\nZarr store with no coordinate chunking. At this time there is a known issue with pangeo-forge data generation where coordinates are chunked. This makes a significant impact on performance."
  },
  {
    "objectID": "approaches/tiling/cmip6-zarr-tile-server-benchmarks.html#dataset-preprocessing",
    "href": "approaches/tiling/cmip6-zarr-tile-server-benchmarks.html#dataset-preprocessing",
    "title": "CMIP6 Zarr Tile Server Benchmarks",
    "section": "",
    "text": "Benchmarks were generated for multiple copies of the CMIP6 daily data to understand the performance for different data pre-processing options. These copies were differentiated by:\n\ndata file format (netCDF or Zarr), and,\ndifferent chunking configurations.\n\nThe test datasets produced and benchmarked are:\n\nkerchunk + netCDF: A kerchunk reference file for NetCDF files stored on S3.\n3 Zarr stores with different chunking configurations and pyramids.\n\nChunked to optimize for time series analysis:\n\nlatitude: 252, longitude: 252, time: 365.\nThis dataset has larger chunks, but more timesteps are loaded into each chunk.\n\nChunked to optimize for visualization at a single time step.\n\nlatitude: 600, longitude: 1440, time: 1.\nThis dataset has small chunks, but will likely not work well for time series generation.\n\nChunked to optimize for both time series and visualization:\n\nlatitude: 600, longitude: 1440, time: 29.\nThis dataset has larger chunks, but more timesteps are loaded into each chunk.\n\n\nZarr store with no coordinate chunking. At this time there is a known issue with pangeo-forge data generation where coordinates are chunked. This makes a significant impact on performance."
  },
  {
    "objectID": "approaches/tiling/cmip6-zarr-tile-server-benchmarks.html#code-profiling-methodology",
    "href": "approaches/tiling/cmip6-zarr-tile-server-benchmarks.html#code-profiling-methodology",
    "title": "CMIP6 Zarr Tile Server Benchmarks",
    "section": "Code Profiling Methodology",
    "text": "Code Profiling Methodology\nThe time to generate a tile at zoom 0 to 11 was tested for each data store 10 times. The mean of these times is reported. Tests were run on the VEDA JupyterHub and the details can be reviewed in the profile.ipynb notebook of the tile-benchmarking repo.\nThe libraries used to generate image tiles are xarray for reading the Zarr metadata and rio_tiler’s XarrayReader for reading data from the NetCDFs or Zarr files on S3.\nrio_tiler.XarrayReader is used in titiler-xarray and replicated in the tile-benchmarking repo to generate tiles. Maintaining a copy enabled full control to add timers to blocks of code and logs to understand where time was being spent. Specifically:\n\nimport s3fs; s3fs.core.setup_logging(\"DEBUG\") was used to debug calls to S3. This was used to understand that the most time is spent opening the dataset, which was impacted by open all the coordinate chunks.\nTiming code blocks also demonstrated that the most time, other than opening the dataset, was spent in reprojecting the data. Time to reproject the data is positively correlated with the chunk size, since the minimum amount of data that can be read from S3 is the size of the data chunk.\ncprofile was also used, however the information it provided wasn’t useful to the current investigation."
  },
  {
    "objectID": "approaches/tiling/results-summary.html",
    "href": "approaches/tiling/results-summary.html",
    "title": "Results Summary",
    "section": "",
    "text": "Results Summary\nCOMING SOON."
  },
  {
    "objectID": "approaches/dynamic-client/benchmarking-methodology.html",
    "href": "approaches/dynamic-client/benchmarking-methodology.html",
    "title": "Benchmarking Methodology",
    "section": "",
    "text": "The end-to-end benchmarks capture the user experience for various interactions. The suite of benchmarks included in this cookbook are designed to inform how the choice of Zarr versions and chunking schemes influence the user experience.\n\n\nWe used the publicly available NASA Earth Exchange Global Daily Downscaled Projections (NEX-GDDP-CMIP6) AWS public dataset for this project. For this demonstration, we used two years of the the daily maximum near-surface air temperature (tasmax) variable from the ACCESS-CM2 climate model.\nWe first transformed the NetCDF files hosted on S3 to Zarr stores, with the full notebook available in the benchmark-maps repository.\nNext, we used ndpyramid to generate pyramids for the Zarr store. The notebook for generating pyramids is available in the benchmark-maps repository. We created pyramids containing four zoom levels using the pyramid_reproject function in ndpyramid. We generated pyramids using multiple data configurations, including 128 and 256 pixels per tile in the spatial dimensions and 1MB, 5MB, 10MB, and 25MB target chunk sizes. The chunk size along the time dimension was the largest number of time slices that would evenly divide the time dimension and produce an uncompressed chunk that did not exceed the target size. For most use-cases, the time dimension would not need to be evenly divisable by the chunk size; this was only necessary for the comparison with V3 sharded datasets. The data were encoded as float32 while the time coordinate was encoded as int32 using level 1 gzip compression.\nWe used the experimental zarrita library to convert the pyramids to Zarr V3 data for performance testing. The data leveraged the same encoding as the Zarr V2 pyramids, with the addition of a sharding codec. The target shard sizes were 25MB, 50MB, and 100MB and the chunk size within each shard was equivalent to the V2 chunking scheme.\n\n\n\nCarbonPlan’s benchmark-maps repository leverages Playwright for the end-to-end performance benchmarks. By default, the benchmarks are run on https://prototype-maps.vercel.app/ although the url is configurable. The dynamic client prototype library shows this domain after selecting a dataset and Zarr version.\nThe benchmarking script takes the following steps:\n\nLaunch chromium browser\nCreate a new page\nStart chromium tracing\nNavigate to web mapping application\nSelect Dataset in the dropdown\nWait 5 seconds for the page the render\nZoom in a defined number of times, waiting 5 seconds after each action\nWrite out metadata about each run and the trace record\n\n\n\n\nThe benchmark-maps repository can be used to run the benchmarking suite. The first step is to clone the repository:\ngit clone https://github.com/carbonplan/benchmark-maps.git\nThe next step is to create an environment for running the benchmarks. We recommend mamba for managing the environment. You will also need to install the required dependencies for playwright:\nmamba env create --file binder/environment.yml\nmamba activate benchmark-maps\nplaywright install\nOnce the environment is set up, you can run the benchmarks by running the following command:\npython main.py --dataset 1MB-chunks --zarr-version v2 --action zoom_in --zoom-level 4\nIn addition, main.sh in the benchmark-maps repository is a script for running multiple iterations of the benchmarks on multiple datasets and Zarr versions.\n\n\n\nEach benchmark yields a metadata file and trace record. The carbonplan_benchmarks Python package provides utilities for analyzing and visualizing these outputs."
  },
  {
    "objectID": "approaches/dynamic-client/benchmarking-methodology.html#end-to-end-benchmarks",
    "href": "approaches/dynamic-client/benchmarking-methodology.html#end-to-end-benchmarks",
    "title": "Benchmarking Methodology",
    "section": "",
    "text": "The end-to-end benchmarks capture the user experience for various interactions. The suite of benchmarks included in this cookbook are designed to inform how the choice of Zarr versions and chunking schemes influence the user experience.\n\n\nWe used the publicly available NASA Earth Exchange Global Daily Downscaled Projections (NEX-GDDP-CMIP6) AWS public dataset for this project. For this demonstration, we used two years of the the daily maximum near-surface air temperature (tasmax) variable from the ACCESS-CM2 climate model.\nWe first transformed the NetCDF files hosted on S3 to Zarr stores, with the full notebook available in the benchmark-maps repository.\nNext, we used ndpyramid to generate pyramids for the Zarr store. The notebook for generating pyramids is available in the benchmark-maps repository. We created pyramids containing four zoom levels using the pyramid_reproject function in ndpyramid. We generated pyramids using multiple data configurations, including 128 and 256 pixels per tile in the spatial dimensions and 1MB, 5MB, 10MB, and 25MB target chunk sizes. The chunk size along the time dimension was the largest number of time slices that would evenly divide the time dimension and produce an uncompressed chunk that did not exceed the target size. For most use-cases, the time dimension would not need to be evenly divisable by the chunk size; this was only necessary for the comparison with V3 sharded datasets. The data were encoded as float32 while the time coordinate was encoded as int32 using level 1 gzip compression.\nWe used the experimental zarrita library to convert the pyramids to Zarr V3 data for performance testing. The data leveraged the same encoding as the Zarr V2 pyramids, with the addition of a sharding codec. The target shard sizes were 25MB, 50MB, and 100MB and the chunk size within each shard was equivalent to the V2 chunking scheme.\n\n\n\nCarbonPlan’s benchmark-maps repository leverages Playwright for the end-to-end performance benchmarks. By default, the benchmarks are run on https://prototype-maps.vercel.app/ although the url is configurable. The dynamic client prototype library shows this domain after selecting a dataset and Zarr version.\nThe benchmarking script takes the following steps:\n\nLaunch chromium browser\nCreate a new page\nStart chromium tracing\nNavigate to web mapping application\nSelect Dataset in the dropdown\nWait 5 seconds for the page the render\nZoom in a defined number of times, waiting 5 seconds after each action\nWrite out metadata about each run and the trace record\n\n\n\n\nThe benchmark-maps repository can be used to run the benchmarking suite. The first step is to clone the repository:\ngit clone https://github.com/carbonplan/benchmark-maps.git\nThe next step is to create an environment for running the benchmarks. We recommend mamba for managing the environment. You will also need to install the required dependencies for playwright:\nmamba env create --file binder/environment.yml\nmamba activate benchmark-maps\nplaywright install\nOnce the environment is set up, you can run the benchmarks by running the following command:\npython main.py --dataset 1MB-chunks --zarr-version v2 --action zoom_in --zoom-level 4\nIn addition, main.sh in the benchmark-maps repository is a script for running multiple iterations of the benchmarks on multiple datasets and Zarr versions.\n\n\n\nEach benchmark yields a metadata file and trace record. The carbonplan_benchmarks Python package provides utilities for analyzing and visualizing these outputs."
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results-projection.html",
    "href": "approaches/dynamic-client/e2e-results-projection.html",
    "title": "Benchmarking: Projection",
    "section": "",
    "text": "import hvplot\nimport holoviews as hv\nimport pandas as pd\nimport hvplot.pandas  # noqa\n\nimport statsmodels.formula.api as smf\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\nRead summary of all benchmarking results.\n\nsummary = pd.read_parquet(\"s3://carbonplan-benchmarks/benchmark-data/v0.2/summary.parq\")\n\nSubset the data to isolate the impact of projection and chunk size.\n\ndf = summary[(summary[\"pixels_per_tile\"] == 128) & (summary[\"region\"] == \"us-west-2\")]\n\nSet plot options.\n\ncmap = [\"#E66100\", \"#5D3A9B\"]\nplt_opts = {\"width\": 600, \"height\": 400}\n\nCreate a box plot showing how the rendering time depends on Zarr version and chunk size.\n\ndf.hvplot.box(\n    y=\"duration\",\n    by=[\"actual_chunk_size\", \"projection\"],\n    c=\"projection\",\n    cmap=cmap,\n    ylabel=\"Time to render (ms)\",\n    xlabel=\"Chunk size (MB); EPSG number\",\n    legend=False,\n).opts(**plt_opts)\n\n\n\n\n\n  \n\n\n\n\nFit a multiple linear regression to the results. The results show that the projection, along with the chunk size, strongly impacts the rendering time, with web mercator pyramids rendering faster than equidistant cylindrical pyramids.\n\nmodel = smf.ols(\"duration ~ actual_chunk_size + C(projection)\", data=df).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.431\n\n\nModel:\nOLS\nAdj. R-squared:\n0.430\n\n\nMethod:\nLeast Squares\nF-statistic:\n387.2\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n7.16e-126\n\n\nTime:\n20:29:50\nLog-Likelihood:\n-8152.5\n\n\nNo. Observations:\n1024\nAIC:\n1.631e+04\n\n\nDf Residuals:\n1021\nBIC:\n1.633e+04\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1864.6662\n39.029\n47.776\n0.000\n1788.080\n1941.252\n\n\nC(projection)[T.4326]\n580.6684\n43.438\n13.368\n0.000\n495.430\n665.906\n\n\nactual_chunk_size\n60.3908\n2.474\n24.408\n0.000\n55.536\n65.246\n\n\n\n\n\n\nOmnibus:\n7.834\nDurbin-Watson:\n1.830\n\n\nProb(Omnibus):\n0.020\nJarque-Bera (JB):\n7.973\n\n\nSkew:\n-0.210\nProb(JB):\n0.0186\n\n\nKurtosis:\n2.897\nCond. No.\n31.2\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nShow the rendering time at different zoom levels.\n\nplt_opts = {\"width\": 400, \"height\": 300}\n\nplts = []\n\nfor zoom_level in range(4):\n    df_level = df[df[\"zoom\"] == zoom_level]\n    plts.append(\n        df_level.hvplot.box(\n            y=\"duration\",\n            by=[\"actual_chunk_size\", \"projection\"],\n            c=\"projection\",\n            cmap=cmap,\n            ylabel=\"Time to render (ms)\",\n            xlabel=\"Chunk size (MB); EPSG number\",\n            legend=False,\n            title=f\"Zoom level {zoom_level}\",\n        ).opts(**plt_opts)\n    )\nhv.Layout(plts).cols(2)\n\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_drag' property; using the latest value\n  layout_plot = gridplot(\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_scroll' property; using the latest value\n  layout_plot = gridplot(\n\n\n\n\n\n\n  \n\n\n\n\nAdd a multiplicative interaction term with zoom level to the multiple linear regression. The results show that projection has a significant impact on rendering performance at higher zoom levels, with the most pronounced affect at zoom level 3. Larger chunk size increases the amount of time for rendering equidistant cylindrical pyramids relative to web mercator pyramids.\n\nmodel = smf.ols(\n    \"duration ~ actual_chunk_size * C(projection) + C(projection) * C(zoom)\", data=df\n).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.729\n\n\nModel:\nOLS\nAdj. R-squared:\n0.726\n\n\nMethod:\nLeast Squares\nF-statistic:\n302.5\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n5.84e-280\n\n\nTime:\n20:29:51\nLog-Likelihood:\n-7773.7\n\n\nNo. Observations:\n1024\nAIC:\n1.557e+04\n\n\nDf Residuals:\n1014\nBIC:\n1.562e+04\n\n\nDf Model:\n9\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1760.2638\n48.690\n36.152\n0.000\n1664.719\n1855.809\n\n\nC(projection)[T.4326]\n-311.9528\n68.858\n-4.530\n0.000\n-447.074\n-176.832\n\n\nC(zoom)[T.1.0]\n1043.0435\n60.224\n17.319\n0.000\n924.866\n1161.221\n\n\nC(zoom)[T.2.0]\n239.5532\n60.224\n3.978\n0.000\n121.376\n357.731\n\n\nC(zoom)[T.3.0]\n-186.3396\n60.224\n-3.094\n0.002\n-304.517\n-68.162\n\n\nC(projection)[T.4326]:C(zoom)[T.1.0]\n42.7015\n85.169\n0.501\n0.616\n-124.427\n209.830\n\n\nC(projection)[T.4326]:C(zoom)[T.2.0]\n741.8614\n85.169\n8.710\n0.000\n574.733\n908.990\n\n\nC(projection)[T.4326]:C(zoom)[T.3.0]\n1428.6270\n85.169\n16.774\n0.000\n1261.499\n1595.755\n\n\nactual_chunk_size\n42.9576\n2.426\n17.710\n0.000\n38.198\n47.717\n\n\nactual_chunk_size:C(projection)[T.4326]\n34.8665\n3.430\n10.164\n0.000\n28.135\n41.598\n\n\n\n\n\n\nOmnibus:\n78.010\nDurbin-Watson:\n1.395\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n95.056\n\n\nSkew:\n-0.699\nProb(JB):\n2.29e-21\n\n\nKurtosis:\n3.525\nCond. No.\n151.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results-aws-region.html",
    "href": "approaches/dynamic-client/e2e-results-aws-region.html",
    "title": "Benchmarking: AWS Region",
    "section": "",
    "text": "import hvplot\nimport holoviews as hv\nimport pandas as pd\nimport hvplot.pandas  # noqa\n\nimport statsmodels.formula.api as smf\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\nRead summary of all benchmarking results.\n\nsummary = pd.read_parquet(\"s3://carbonplan-benchmarks/benchmark-data/v0.2/summary.parq\")\n\nSubset the data to isolate the impact of location and chunk size.\n\ndf = summary[\n    (summary[\"projection\"] == 3857)\n    & (summary[\"pixels_per_tile\"] == 128)\n    & (summary[\"shard_size\"] == 0)\n]\n\nSet plot options.\n\ncmap = [\"#FFC20A\", \"#0C7BDC\"]\nplt_opts = {\"width\": 600, \"height\": 400}\n\nCreate a box plot showing how the rendering time depends on the AWS region and chunk size.\n\ndf.hvplot.box(\n    y=\"duration\",\n    by=[\"actual_chunk_size\", \"region\"],\n    c=\"region\",\n    cmap=cmap,\n    ylabel=\"Time to render (ms)\",\n    xlabel=\"Chunk size (MB); AWS region\",\n    legend=False,\n).opts(**plt_opts)\n\n\n\n\n\n  \n\n\n\n\nFit a multiple linear regression to the results. The results show that the chunk size strongly impacts the action duration. Datasets with larger chunk sizes take longer to render. The AWS region does not have a noticeable impact on rendering time.\n\nmodel = smf.ols(\"duration ~ actual_chunk_size + C(region)\", data=df).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.446\n\n\nModel:\nOLS\nAdj. R-squared:\n0.444\n\n\nMethod:\nLeast Squares\nF-statistic:\n205.1\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n4.58e-66\n\n\nTime:\n20:28:30\nLog-Likelihood:\n-3916.0\n\n\nNo. Observations:\n512\nAIC:\n7838.\n\n\nDf Residuals:\n509\nBIC:\n7851.\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1859.2163\n40.422\n45.995\n0.000\n1779.801\n1938.631\n\n\nC(region)[T.us-west-2]\n-53.6344\n44.989\n-1.192\n0.234\n-142.021\n34.752\n\n\nactual_chunk_size\n51.8170\n2.563\n20.221\n0.000\n46.782\n56.852\n\n\n\n\n\n\nOmnibus:\n22.416\nDurbin-Watson:\n1.979\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n12.956\n\n\nSkew:\n0.227\nProb(JB):\n0.00154\n\n\nKurtosis:\n2.367\nCond. No.\n31.2\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results-shard-size.html",
    "href": "approaches/dynamic-client/e2e-results-shard-size.html",
    "title": "Benchmarking: Shard Size",
    "section": "",
    "text": "import hvplot\nimport holoviews as hv\nimport pandas as pd\nimport hvplot.pandas  # noqa\n\nimport statsmodels.formula.api as smf\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\nRead summary of all benchmarking results.\n\nsummary = pd.read_parquet(\"s3://carbonplan-benchmarks/benchmark-data/v0.2/summary.parq\")\n\nSubset the data to isolate the impact of chunk and shard size.\n\ndf = summary[\n    (summary[\"projection\"] == 4326)\n    & (summary[\"pixels_per_tile\"] == 128)\n    & (summary[\"shard_size\"] &gt; 0)\n    & (summary[\"region\"] == \"us-west-2\")\n]\n\nCreate a box plot showing how the rendering time depends on chunk and shard size.\n\ndf.hvplot.box(\n    y=\"duration\",\n    by=[\"actual_chunk_size\", \"shard_size\"],\n    c=\"shard_size\",\n    cmap=[\"#FEFE62\", \"#D35FB7\"],\n    ylabel=\"Time to render (ms)\",\n    xlabel=\"Chunk size (MB); Target shard size (MB)\",\n    legend=False,\n).opts(width=600, height=400)\n\n\n\n\n\n  \n\n\n\n\nFit a multiple linear regression to the results. The results show that the chunk size strongly impacts the action duration. Datasets with larger chunk sizes take longer to render. The shard size does not have a noticeable impact on rendering time.\n\nmodel = smf.ols(\"duration ~ actual_chunk_size + shard_size\", data=df).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.398\n\n\nModel:\nOLS\nAdj. R-squared:\n0.393\n\n\nMethod:\nLeast Squares\nF-statistic:\n83.71\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n1.25e-28\n\n\nTime:\n20:30:46\nLog-Likelihood:\n-2063.2\n\n\nNo. Observations:\n256\nAIC:\n4132.\n\n\nDf Residuals:\n253\nBIC:\n4143.\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2446.8248\n161.251\n15.174\n0.000\n2129.259\n2764.391\n\n\nactual_chunk_size\n70.9110\n5.482\n12.935\n0.000\n60.115\n81.707\n\n\nshard_size\n0.6188\n1.925\n0.321\n0.748\n-3.172\n4.409\n\n\n\n\n\n\nOmnibus:\n31.868\nDurbin-Watson:\n2.302\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n39.758\n\n\nSkew:\n-0.911\nProb(JB):\n2.33e-09\n\n\nKurtosis:\n3.637\nCond. No.\n267.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results-zarr-version-shards.html",
    "href": "approaches/dynamic-client/e2e-results-zarr-version-shards.html",
    "title": "Benchmarking: Sharding Extension",
    "section": "",
    "text": "import hvplot\nimport holoviews as hv\nimport pandas as pd\nimport hvplot.pandas  # noqa\n\nimport statsmodels.formula.api as smf\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\nRead summary of all benchmarking results.\n\nsummary = pd.read_parquet(\"s3://carbonplan-benchmarks/benchmark-data/v0.2/summary.parq\")\n\nSubset the data to isolate the impact of Zarr version when using the sharding extension for V3 data and chunk size.\n\ndf = summary[\n    (summary[\"projection\"] == 3857)\n    & (summary[\"pixels_per_tile\"] == 128)\n    & ((summary[\"zarr_version\"] == 2) | (summary[\"shard_size\"] == 100))\n    & (summary[\"region\"] == \"us-west-2\")\n]\n\n\ncmap = [\"#E1BE6A\", \"#40B0A6\"]\nplt_opts = {\"width\": 600, \"height\": 400}\n\nCreate a box plot showing how the rendering time depends on Zarr version when using the sharding extension for V3 data and chunk size.\n\ndf.hvplot.box(\n    y=\"duration\",\n    by=[\"actual_chunk_size\", \"zarr_version\"],\n    c=\"zarr_version\",\n    cmap=cmap,\n    ylabel=\"Time to render (ms)\",\n    xlabel=\"Chunk size (MB); Zarr Version\",\n    legend=False,\n).opts(**plt_opts)\n\n\n\n\n\n  \n\n\n\n\nFit a multiple linear regression to the results. The results show that rendering Zarr V3 data with the sharding extension is slower than rendering Zarr V2 data, but most of the variance in rendering time is unexplained by that variable alone.\n\nmodel = smf.ols(\"duration ~ actual_chunk_size + C(zarr_version)\", data=df).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.320\n\n\nModel:\nOLS\nAdj. R-squared:\n0.315\n\n\nMethod:\nLeast Squares\nF-statistic:\n59.65\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n5.99e-22\n\n\nTime:\n20:31:22\nLog-Likelihood:\n-1988.5\n\n\nNo. Observations:\n256\nAIC:\n3983.\n\n\nDf Residuals:\n253\nBIC:\n3994.\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1914.6479\n64.596\n29.640\n0.000\n1787.434\n2041.862\n\n\nC(zarr_version)[T.3]\n268.8945\n71.893\n3.740\n0.000\n127.310\n410.479\n\n\nactual_chunk_size\n42.0231\n4.095\n10.262\n0.000\n33.958\n50.088\n\n\n\n\n\n\nOmnibus:\n7.661\nDurbin-Watson:\n2.198\n\n\nProb(Omnibus):\n0.022\nJarque-Bera (JB):\n6.705\n\n\nSkew:\n0.323\nProb(JB):\n0.0350\n\n\nKurtosis:\n2.539\nCond. No.\n31.2\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nShow the rendering time at different zoom levels.\n\nplt_opts = {\"width\": 400, \"height\": 300}\n\nplts = []\n\nfor zoom_level in range(4):\n    df_level = df[df[\"zoom\"] == zoom_level]\n    plts.append(\n        df_level.hvplot.box(\n            y=\"duration\",\n            by=[\"actual_chunk_size\", \"zarr_version\"],\n            c=\"zarr_version\",\n            cmap=cmap,\n            ylabel=\"Time to render (ms)\",\n            xlabel=\"Chunk size (MB); Zarr version\",\n            legend=False,\n            title=f\"Zoom level {zoom_level}\",\n        ).opts(**plt_opts)\n    )\nhv.Layout(plts).cols(2)\n\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_drag' property; using the latest value\n  layout_plot = gridplot(\n/Users/max/mambaforge/envs/benchmark-maps/lib/python3.10/site-packages/holoviews/plotting/bokeh/plot.py:987: UserWarning: found multiple competing values for 'toolbar.active_scroll' property; using the latest value\n  layout_plot = gridplot(\n\n\n\n\n\n\n  \n\n\n\n\nAdd a multiplicative interaction term with zoom level to the multiple linear regression. The results show that chunk size has a significant impact on rendering performance at higher zoom levels, with the most pronounced affect at zoom level 3. Zarr V3 data with sharding renders faster than Zarr V2 data at zoom level 0 but slower at higher zoom levels.\n\nmodel = smf.ols(\n    \"duration ~ actual_chunk_size * C(zoom) + C(zarr_version) * C(zoom) + actual_chunk_size * C(zarr_version)\",\n    data=df,\n).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.948\n\n\nModel:\nOLS\nAdj. R-squared:\n0.945\n\n\nMethod:\nLeast Squares\nF-statistic:\n369.4\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n1.74e-148\n\n\nTime:\n20:31:23\nLog-Likelihood:\n-1659.4\n\n\nNo. Observations:\n256\nAIC:\n3345.\n\n\nDf Residuals:\n243\nBIC:\n3391.\n\n\nDf Model:\n12\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2225.1492\n38.148\n58.329\n0.000\n2150.006\n2300.292\n\n\nC(zoom)[T.1.0]\n210.8908\n51.552\n4.091\n0.000\n109.345\n312.437\n\n\nC(zoom)[T.2.0]\n-578.2420\n51.552\n-11.217\n0.000\n-679.788\n-476.696\n\n\nC(zoom)[T.3.0]\n-1050.6001\n51.552\n-20.379\n0.000\n-1152.146\n-949.054\n\n\nC(zarr_version)[T.3]\n-34.4019\n46.388\n-0.742\n0.459\n-125.775\n56.971\n\n\nC(zarr_version)[T.3]:C(zoom)[T.1.0]\n612.5118\n57.376\n10.675\n0.000\n499.494\n725.529\n\n\nC(zarr_version)[T.3]:C(zoom)[T.2.0]\n412.6057\n57.376\n7.191\n0.000\n299.588\n525.623\n\n\nC(zarr_version)[T.3]:C(zoom)[T.3.0]\n539.9608\n57.376\n9.411\n0.000\n426.943\n652.978\n\n\nactual_chunk_size\n0.5489\n2.584\n0.212\n0.832\n-4.540\n5.638\n\n\nactual_chunk_size:C(zoom)[T.1.0]\n58.0800\n3.268\n17.771\n0.000\n51.642\n64.518\n\n\nactual_chunk_size:C(zoom)[T.2.0]\n63.2566\n3.268\n19.355\n0.000\n56.819\n69.694\n\n\nactual_chunk_size:C(zoom)[T.3.0]\n62.6391\n3.268\n19.166\n0.000\n56.202\n69.077\n\n\nactual_chunk_size:C(zarr_version)[T.3]\n-9.0395\n2.311\n-3.912\n0.000\n-13.592\n-4.487\n\n\n\n\n\n\nOmnibus:\n0.970\nDurbin-Watson:\n1.815\n\n\nProb(Omnibus):\n0.616\nJarque-Bera (JB):\n0.681\n\n\nSkew:\n-0.046\nProb(JB):\n0.712\n\n\nKurtosis:\n3.235\nCond. No.\n168.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "approaches/dynamic-client/e2e-results-pixels-per-tile.html",
    "href": "approaches/dynamic-client/e2e-results-pixels-per-tile.html",
    "title": "Benchmarking: Pixels per Tile",
    "section": "",
    "text": "import hvplot\nimport holoviews as hv\nimport pandas as pd\nimport hvplot.pandas  # noqa\n\nimport statsmodels.formula.api as smf\n\npd.options.plotting.backend = \"holoviews\"\n\n\n\n\n\n\n\n\n\n\n\nRead summary of all benchmarking results.\n\nsummary = pd.read_parquet(\"s3://carbonplan-benchmarks/benchmark-data/v0.2/summary.parq\")\n\nSubset the data to isolate the impact of the number of pixels per tile and chunk size.\n\ndf = summary[\n    (summary[\"projection\"] == 3857) & (summary[\"region\"] == \"us-west-2\")\n].sort_values(by=[\"target_chunk_size\", \"pixels_per_tile\"])\n\nSet plot options.\n\ncmap = [\"#994F00\", \"#006CD1\"]\nplt_opts = {\"width\": 600, \"height\": 400}\n\nCreate a box plot showing how the rendering time depends on the number of pixels per tile and chunk size.\n\ndf.hvplot.box(\n    y=\"duration\",\n    by=[\"actual_chunk_size\", \"pixels_per_tile\"],\n    c=\"pixels_per_tile\",\n    cmap=cmap,\n    ylabel=\"Time to render (ms)\",\n    xlabel=\"Chunk size (MB); Pixels per tile\",\n    legend=False,\n).opts(**plt_opts)\n\n\n\n\n\n  \n\n\n\n\nFit a multiple linear regression to the results. The results show that the number of pixels per tile independent of the chunk size does not significantly impact rendering time. Datasets with larger chunks take longer to render.\n\nmodel = smf.ols(\"duration ~ actual_chunk_size + C(pixels_per_tile)\", data=df).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nduration\nR-squared:\n0.275\n\n\nModel:\nOLS\nAdj. R-squared:\n0.273\n\n\nMethod:\nLeast Squares\nF-statistic:\n193.4\n\n\nDate:\nTue, 29 Aug 2023\nProb (F-statistic):\n6.08e-72\n\n\nTime:\n20:29:05\nLog-Likelihood:\n-7981.0\n\n\nNo. Observations:\n1024\nAIC:\n1.597e+04\n\n\nDf Residuals:\n1021\nBIC:\n1.598e+04\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2031.8289\n33.974\n59.805\n0.000\n1965.162\n2098.496\n\n\nC(pixels_per_tile)[T.256]\n-3.3655\n37.576\n-0.090\n0.929\n-77.101\n70.370\n\n\nactual_chunk_size\n43.2144\n2.250\n19.209\n0.000\n38.800\n47.629\n\n\n\n\n\n\nOmnibus:\n35.870\nDurbin-Watson:\n2.052\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n39.124\n\n\nSkew:\n0.477\nProb(JB):\n3.19e-09\n\n\nKurtosis:\n2.907\nCond. No.\n29.2\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  }
]